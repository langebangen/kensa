/**
 * This class is generated by jOOQ
 */
package com.github.langebangen.kensa.storage.generated.tables;


import com.github.langebangen.kensa.storage.generated.Keys;
import com.github.langebangen.kensa.storage.generated.Public;
import com.github.langebangen.kensa.storage.generated.tables.records.InsultRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Insult extends TableImpl<InsultRecord> {

    private static final long serialVersionUID = -78931223;

    /**
     * The reference instance of <code>public.insult</code>
     */
    public static final Insult INSULT = new Insult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InsultRecord> getRecordType() {
        return InsultRecord.class;
    }

    /**
     * The column <code>public.insult.text</code>.
     */
    public final TableField<InsultRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.insult.id</code>.
     */
    public final TableField<InsultRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('insult_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.insult</code> table reference
     */
    public Insult() {
        this("insult", null);
    }

    /**
     * Create an aliased <code>public.insult</code> table reference
     */
    public Insult(String alias) {
        this(alias, INSULT);
    }

    private Insult(String alias, Table<InsultRecord> aliased) {
        this(alias, aliased, null);
    }

    private Insult(String alias, Table<InsultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InsultRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INSULT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InsultRecord> getPrimaryKey() {
        return Keys.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InsultRecord>> getKeys() {
        return Arrays.<UniqueKey<InsultRecord>>asList(Keys.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Insult as(String alias) {
        return new Insult(alias, this);
    }

    /**
     * Rename this table
     */
    public Insult rename(String name) {
        return new Insult(name, null);
    }
}
